///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class CreatePaymentModelDataTimeline {
/*
{
  "status": "NEW",
  "time": "2022-08-11T09:54:29Z"
} 
*/

  String? status;
  String? time;

  CreatePaymentModelDataTimeline({
    this.status,
    this.time,
  });
  CreatePaymentModelDataTimeline.fromJson(Map<String, dynamic> json) {
    status = json['status']?.toString();
    time = json['time']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['status'] = status;
    data['time'] = time;
    return data;
  }
}

class CreatePaymentModelDataPricingBitcoin {
/*
{
  "amount": "0.00020410",
  "currency": "BTC"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingBitcoin({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingBitcoin.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingLitecoin {
/*
{
  "amount": "0.08069071",
  "currency": "LTC"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingLitecoin({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingLitecoin.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingDogecoin {
/*
{
  "amount": "69.98390370",
  "currency": "DOGE"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingDogecoin({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingDogecoin.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingBitcoincash {
/*
{
  "amount": "0.03480925",
  "currency": "BCH"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingBitcoincash({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingBitcoincash.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingTether {
/*
{
  "amount": "4.997776",
  "currency": "USDT"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingTether({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingTether.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingShibainu {
/*
{
  "amount": "401767.778224185000000000",
  "currency": "SHIB"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingShibainu({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingShibainu.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingApecoin {
/*
{
  "amount": "0.702493853178784686",
  "currency": "APE"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingApecoin({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingApecoin.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingDai {
/*
{
  "amount": "4.999250112483127531",
  "currency": "DAI"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingDai({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingDai.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingUsdc {
/*
{
  "amount": "5.000000",
  "currency": "USDC"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingUsdc({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingUsdc.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingEthereum {
/*
{
  "amount": "0.002648000",
  "currency": "ETH"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingEthereum({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingEthereum.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricingLocal {
/*
{
  "amount": "5.00",
  "currency": "USD"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPricingLocal({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPricingLocal.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPricing {
/*
{
  "local": {
    "amount": "5.00",
    "currency": "USD"
  },
  "ethereum": {
    "amount": "0.002648000",
    "currency": "ETH"
  },
  "usdc": {
    "amount": "5.000000",
    "currency": "USDC"
  },
  "dai": {
    "amount": "4.999250112483127531",
    "currency": "DAI"
  },
  "apecoin": {
    "amount": "0.702493853178784686",
    "currency": "APE"
  },
  "shibainu": {
    "amount": "401767.778224185000000000",
    "currency": "SHIB"
  },
  "tether": {
    "amount": "4.997776",
    "currency": "USDT"
  },
  "bitcoincash": {
    "amount": "0.03480925",
    "currency": "BCH"
  },
  "dogecoin": {
    "amount": "69.98390370",
    "currency": "DOGE"
  },
  "litecoin": {
    "amount": "0.08069071",
    "currency": "LTC"
  },
  "bitcoin": {
    "amount": "0.00020410",
    "currency": "BTC"
  }
} 
*/

  CreatePaymentModelDataPricingLocal? local;
  CreatePaymentModelDataPricingEthereum? ethereum;
  CreatePaymentModelDataPricingUsdc? usdc;
  CreatePaymentModelDataPricingDai? dai;
  CreatePaymentModelDataPricingApecoin? apecoin;
  CreatePaymentModelDataPricingShibainu? shibainu;
  CreatePaymentModelDataPricingTether? tether;
  CreatePaymentModelDataPricingBitcoincash? bitcoincash;
  CreatePaymentModelDataPricingDogecoin? dogecoin;
  CreatePaymentModelDataPricingLitecoin? litecoin;
  CreatePaymentModelDataPricingBitcoin? bitcoin;

  CreatePaymentModelDataPricing({
    this.local,
    this.ethereum,
    this.usdc,
    this.dai,
    this.apecoin,
    this.shibainu,
    this.tether,
    this.bitcoincash,
    this.dogecoin,
    this.litecoin,
    this.bitcoin,
  });
  CreatePaymentModelDataPricing.fromJson(Map<String, dynamic> json) {
    local = (json['local'] != null) ? CreatePaymentModelDataPricingLocal.fromJson(json['local']) : null;
    ethereum = (json['ethereum'] != null) ? CreatePaymentModelDataPricingEthereum.fromJson(json['ethereum']) : null;
    usdc = (json['usdc'] != null) ? CreatePaymentModelDataPricingUsdc.fromJson(json['usdc']) : null;
    dai = (json['dai'] != null) ? CreatePaymentModelDataPricingDai.fromJson(json['dai']) : null;
    apecoin = (json['apecoin'] != null) ? CreatePaymentModelDataPricingApecoin.fromJson(json['apecoin']) : null;
    shibainu = (json['shibainu'] != null) ? CreatePaymentModelDataPricingShibainu.fromJson(json['shibainu']) : null;
    tether = (json['tether'] != null) ? CreatePaymentModelDataPricingTether.fromJson(json['tether']) : null;
    bitcoincash = (json['bitcoincash'] != null) ? CreatePaymentModelDataPricingBitcoincash.fromJson(json['bitcoincash']) : null;
    dogecoin = (json['dogecoin'] != null) ? CreatePaymentModelDataPricingDogecoin.fromJson(json['dogecoin']) : null;
    litecoin = (json['litecoin'] != null) ? CreatePaymentModelDataPricingLitecoin.fromJson(json['litecoin']) : null;
    bitcoin = (json['bitcoin'] != null) ? CreatePaymentModelDataPricingBitcoin.fromJson(json['bitcoin']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (local != null) {
      data['local'] = local!.toJson();
    }
    if (ethereum != null) {
      data['ethereum'] = ethereum!.toJson();
    }
    if (usdc != null) {
      data['usdc'] = usdc!.toJson();
    }
    if (dai != null) {
      data['dai'] = dai!.toJson();
    }
    if (apecoin != null) {
      data['apecoin'] = apecoin!.toJson();
    }
    if (shibainu != null) {
      data['shibainu'] = shibainu!.toJson();
    }
    if (tether != null) {
      data['tether'] = tether!.toJson();
    }
    if (bitcoincash != null) {
      data['bitcoincash'] = bitcoincash!.toJson();
    }
    if (dogecoin != null) {
      data['dogecoin'] = dogecoin!.toJson();
    }
    if (litecoin != null) {
      data['litecoin'] = litecoin!.toJson();
    }
    if (bitcoin != null) {
      data['bitcoin'] = bitcoin!.toJson();
    }
    return data;
  }
}

class CreatePaymentModelDataPaymentThresholdUnderpaymentAbsoluteThreshold {
/*
{
  "amount": "5.00",
  "currency": "USD"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPaymentThresholdUnderpaymentAbsoluteThreshold({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPaymentThresholdUnderpaymentAbsoluteThreshold.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPaymentThresholdOverpaymentAbsoluteThreshold {
/*
{
  "amount": "5.00",
  "currency": "USD"
} 
*/

  String? amount;
  String? currency;

  CreatePaymentModelDataPaymentThresholdOverpaymentAbsoluteThreshold({
    this.amount,
    this.currency,
  });
  CreatePaymentModelDataPaymentThresholdOverpaymentAbsoluteThreshold.fromJson(Map<String, dynamic> json) {
    amount = json['amount']?.toString();
    currency = json['currency']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['amount'] = amount;
    data['currency'] = currency;
    return data;
  }
}

class CreatePaymentModelDataPaymentThreshold {
/*
{
  "overpayment_absolute_threshold": {
    "amount": "5.00",
    "currency": "USD"
  },
  "overpayment_relative_threshold": "0.005",
  "underpayment_absolute_threshold": {
    "amount": "5.00",
    "currency": "USD"
  },
  "underpayment_relative_threshold": "0.005"
} 
*/

  CreatePaymentModelDataPaymentThresholdOverpaymentAbsoluteThreshold? overpaymentAbsoluteThreshold;
  String? overpaymentRelativeThreshold;
  CreatePaymentModelDataPaymentThresholdUnderpaymentAbsoluteThreshold? underpaymentAbsoluteThreshold;
  String? underpaymentRelativeThreshold;

  CreatePaymentModelDataPaymentThreshold({
    this.overpaymentAbsoluteThreshold,
    this.overpaymentRelativeThreshold,
    this.underpaymentAbsoluteThreshold,
    this.underpaymentRelativeThreshold,
  });
  CreatePaymentModelDataPaymentThreshold.fromJson(Map<String, dynamic> json) {
    overpaymentAbsoluteThreshold = (json['overpayment_absolute_threshold'] != null) ? CreatePaymentModelDataPaymentThresholdOverpaymentAbsoluteThreshold.fromJson(json['overpayment_absolute_threshold']) : null;
    overpaymentRelativeThreshold = json['overpayment_relative_threshold']?.toString();
    underpaymentAbsoluteThreshold = (json['underpayment_absolute_threshold'] != null) ? CreatePaymentModelDataPaymentThresholdUnderpaymentAbsoluteThreshold.fromJson(json['underpayment_absolute_threshold']) : null;
    underpaymentRelativeThreshold = json['underpayment_relative_threshold']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (overpaymentAbsoluteThreshold != null) {
      data['overpayment_absolute_threshold'] = overpaymentAbsoluteThreshold!.toJson();
    }
    data['overpayment_relative_threshold'] = overpaymentRelativeThreshold;
    if (underpaymentAbsoluteThreshold != null) {
      data['underpayment_absolute_threshold'] = underpaymentAbsoluteThreshold!.toJson();
    }
    data['underpayment_relative_threshold'] = underpaymentRelativeThreshold;
    return data;
  }
}

class CreatePaymentModelDataLocalExchangeRates {
/*
{
  "ETH-USD": "1887.94",
  "BTC-USD": "24497.42",
  "LTC-USD": "61.965",
  "DOGE-USD": "0.071445",
  "BCH-USD": "143.64",
  "USDC-USD": "1.0",
  "DAI-USD": "1.00015",
  "APE-USD": "7.1175",
  "SHIB-USD": "0.000012445",
  "USDT-USD": "1.000445"
} 
*/

  String? ETHUSD;
  String? BTCUSD;
  String? LTCUSD;
  String? DOGEUSD;
  String? BCHUSD;
  String? USDCUSD;
  String? DAIUSD;
  String? APEUSD;
  String? SHIBUSD;
  String? USDTUSD;

  CreatePaymentModelDataLocalExchangeRates({
    this.ETHUSD,
    this.BTCUSD,
    this.LTCUSD,
    this.DOGEUSD,
    this.BCHUSD,
    this.USDCUSD,
    this.DAIUSD,
    this.APEUSD,
    this.SHIBUSD,
    this.USDTUSD,
  });
  CreatePaymentModelDataLocalExchangeRates.fromJson(Map<String, dynamic> json) {
    ETHUSD = json['ETH-USD']?.toString();
    BTCUSD = json['BTC-USD']?.toString();
    LTCUSD = json['LTC-USD']?.toString();
    DOGEUSD = json['DOGE-USD']?.toString();
    BCHUSD = json['BCH-USD']?.toString();
    USDCUSD = json['USDC-USD']?.toString();
    DAIUSD = json['DAI-USD']?.toString();
    APEUSD = json['APE-USD']?.toString();
    SHIBUSD = json['SHIB-USD']?.toString();
    USDTUSD = json['USDT-USD']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['ETH-USD'] = ETHUSD;
    data['BTC-USD'] = BTCUSD;
    data['LTC-USD'] = LTCUSD;
    data['DOGE-USD'] = DOGEUSD;
    data['BCH-USD'] = BCHUSD;
    data['USDC-USD'] = USDCUSD;
    data['DAI-USD'] = DAIUSD;
    data['APE-USD'] = APEUSD;
    data['SHIB-USD'] = SHIBUSD;
    data['USDT-USD'] = USDTUSD;
    return data;
  }
}

class CreatePaymentModelDataExchangeRates {
/*
{
  "ETH-USD": "1887.94",
  "BTC-USD": "24497.42",
  "LTC-USD": "61.965",
  "DOGE-USD": "0.071445",
  "BCH-USD": "143.64",
  "USDC-USD": "1.0",
  "DAI-USD": "1.00015",
  "APE-USD": "7.1175",
  "SHIB-USD": "0.000012445",
  "USDT-USD": "1.000445"
} 
*/

  String? ETHUSD;
  String? BTCUSD;
  String? LTCUSD;
  String? DOGEUSD;
  String? BCHUSD;
  String? USDCUSD;
  String? DAIUSD;
  String? APEUSD;
  String? SHIBUSD;
  String? USDTUSD;

  CreatePaymentModelDataExchangeRates({
    this.ETHUSD,
    this.BTCUSD,
    this.LTCUSD,
    this.DOGEUSD,
    this.BCHUSD,
    this.USDCUSD,
    this.DAIUSD,
    this.APEUSD,
    this.SHIBUSD,
    this.USDTUSD,
  });
  CreatePaymentModelDataExchangeRates.fromJson(Map<String, dynamic> json) {
    ETHUSD = json['ETH-USD']?.toString();
    BTCUSD = json['BTC-USD']?.toString();
    LTCUSD = json['LTC-USD']?.toString();
    DOGEUSD = json['DOGE-USD']?.toString();
    BCHUSD = json['BCH-USD']?.toString();
    USDCUSD = json['USDC-USD']?.toString();
    DAIUSD = json['DAI-USD']?.toString();
    APEUSD = json['APE-USD']?.toString();
    SHIBUSD = json['SHIB-USD']?.toString();
    USDTUSD = json['USDT-USD']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['ETH-USD'] = ETHUSD;
    data['BTC-USD'] = BTCUSD;
    data['LTC-USD'] = LTCUSD;
    data['DOGE-USD'] = DOGEUSD;
    data['BCH-USD'] = BCHUSD;
    data['USDC-USD'] = USDCUSD;
    data['DAI-USD'] = DAIUSD;
    data['APE-USD'] = APEUSD;
    data['SHIB-USD'] = SHIBUSD;
    data['USDT-USD'] = USDTUSD;
    return data;
  }
}

class CreatePaymentModelDataAddresses {
/*
{
  "ethereum": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
  "usdc": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
  "dai": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
  "apecoin": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
  "shibainu": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
  "tether": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
  "bitcoincash": "qrrukd43n8ur6rdf5rcu29hflmdmdgds2y3vqmxmqk",
  "dogecoin": "DQwfBJ5XosyTSZ3p1wfKwGYiACovc2BVxw",
  "litecoin": "MSngcEtmhJYJ2s38DvZbE2kATcKm1icrF8",
  "bitcoin": "3EknNtEgvNhmRU833xphfWhxnexsyakmcJ"
} 
*/

  String? ethereum;
  String? usdc;
  String? dai;
  String? apecoin;
  String? shibainu;
  String? tether;
  String? bitcoincash;
  String? dogecoin;
  String? litecoin;
  String? bitcoin;

  CreatePaymentModelDataAddresses({
    this.ethereum,
    this.usdc,
    this.dai,
    this.apecoin,
    this.shibainu,
    this.tether,
    this.bitcoincash,
    this.dogecoin,
    this.litecoin,
    this.bitcoin,
  });
  CreatePaymentModelDataAddresses.fromJson(Map<String, dynamic> json) {
    ethereum = json['ethereum']?.toString();
    usdc = json['usdc']?.toString();
    dai = json['dai']?.toString();
    apecoin = json['apecoin']?.toString();
    shibainu = json['shibainu']?.toString();
    tether = json['tether']?.toString();
    bitcoincash = json['bitcoincash']?.toString();
    dogecoin = json['dogecoin']?.toString();
    litecoin = json['litecoin']?.toString();
    bitcoin = json['bitcoin']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['ethereum'] = ethereum;
    data['usdc'] = usdc;
    data['dai'] = dai;
    data['apecoin'] = apecoin;
    data['shibainu'] = shibainu;
    data['tether'] = tether;
    data['bitcoincash'] = bitcoincash;
    data['dogecoin'] = dogecoin;
    data['litecoin'] = litecoin;
    data['bitcoin'] = bitcoin;
    return data;
  }
}

class CreatePaymentModelData {
/*
{
  "addresses": {
    "ethereum": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
    "usdc": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
    "dai": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
    "apecoin": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
    "shibainu": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
    "tether": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
    "bitcoincash": "qrrukd43n8ur6rdf5rcu29hflmdmdgds2y3vqmxmqk",
    "dogecoin": "DQwfBJ5XosyTSZ3p1wfKwGYiACovc2BVxw",
    "litecoin": "MSngcEtmhJYJ2s38DvZbE2kATcKm1icrF8",
    "bitcoin": "3EknNtEgvNhmRU833xphfWhxnexsyakmcJ"
  },
  "brand_color": "#122332",
  "brand_logo_url": "",
  "cancel_url": "https://charge/canceled/page",
  "code": "BA859L8P",
  "created_at": "2022-08-11T09:54:29Z",
  "description": "More detailed description, 200 characters or less",
  "exchange_rates": {
    "ETH-USD": "1887.94",
    "BTC-USD": "24497.42",
    "LTC-USD": "61.965",
    "DOGE-USD": "0.071445",
    "BCH-USD": "143.64",
    "USDC-USD": "1.0",
    "DAI-USD": "1.00015",
    "APE-USD": "7.1175",
    "SHIB-USD": "0.000012445",
    "USDT-USD": "1.000445"
  },
  "expires_at": "2022-08-11T10:54:29Z",
  "fee_rate": 0.01,
  "fees_settled": true,
  "hosted_url": "https://commerce.coinbase.com/charges/BA859L8P",
  "id": "c6907635-8eae-497f-8b6f-d8e677842553",
  "local_exchange_rates": {
    "ETH-USD": "1887.94",
    "BTC-USD": "24497.42",
    "LTC-USD": "61.965",
    "DOGE-USD": "0.071445",
    "BCH-USD": "143.64",
    "USDC-USD": "1.0",
    "DAI-USD": "1.00015",
    "APE-USD": "7.1175",
    "SHIB-USD": "0.000012445",
    "USDT-USD": "1.000445"
  },
  "logo_url": "",
  "name": "Charge name, 100 characters or less",
  "offchain_eligible": false,
  "organization_name": "",
  "payment_threshold": {
    "overpayment_absolute_threshold": {
      "amount": "5.00",
      "currency": "USD"
    },
    "overpayment_relative_threshold": "0.005",
    "underpayment_absolute_threshold": {
      "amount": "5.00",
      "currency": "USD"
    },
    "underpayment_relative_threshold": "0.005"
  },
  "pricing": {
    "local": {
      "amount": "5.00",
      "currency": "USD"
    },
    "ethereum": {
      "amount": "0.002648000",
      "currency": "ETH"
    },
    "usdc": {
      "amount": "5.000000",
      "currency": "USDC"
    },
    "dai": {
      "amount": "4.999250112483127531",
      "currency": "DAI"
    },
    "apecoin": {
      "amount": "0.702493853178784686",
      "currency": "APE"
    },
    "shibainu": {
      "amount": "401767.778224185000000000",
      "currency": "SHIB"
    },
    "tether": {
      "amount": "4.997776",
      "currency": "USDT"
    },
    "bitcoincash": {
      "amount": "0.03480925",
      "currency": "BCH"
    },
    "dogecoin": {
      "amount": "69.98390370",
      "currency": "DOGE"
    },
    "litecoin": {
      "amount": "0.08069071",
      "currency": "LTC"
    },
    "bitcoin": {
      "amount": "0.00020410",
      "currency": "BTC"
    }
  },
  "pricing_type": "fixed_price",
  "pwcb_only": false,
  "redirect_url": "https://charge/completed/page",
  "resource": "charge",
  "support_email": "dan.malshan@gmail.com",
  "timeline": [
    {
      "status": "NEW",
      "time": "2022-08-11T09:54:29Z"
    }
  ],
  "utxo": false
} 
*/

  CreatePaymentModelDataAddresses? addresses;
  String? brandColor;
  String? brandLogoUrl;
  String? cancelUrl;
  String? code;
  String? createdAt;
  String? description;
  CreatePaymentModelDataExchangeRates? exchangeRates;
  String? expiresAt;
  double? feeRate;
  bool? feesSettled;
  String? hostedUrl;
  String? id;
  CreatePaymentModelDataLocalExchangeRates? localExchangeRates;
  String? logoUrl;
  String? name;
  bool? offchainEligible;
  String? organizationName;
  CreatePaymentModelDataPaymentThreshold? paymentThreshold;
  CreatePaymentModelDataPricing? pricing;
  String? pricingType;
  bool? pwcbOnly;
  String? redirectUrl;
  String? resource;
  String? supportEmail;
  List<CreatePaymentModelDataTimeline?>? timeline;
  bool? utxo;

  CreatePaymentModelData({
    this.addresses,
    this.brandColor,
    this.brandLogoUrl,
    this.cancelUrl,
    this.code,
    this.createdAt,
    this.description,
    this.exchangeRates,
    this.expiresAt,
    this.feeRate,
    this.feesSettled,
    this.hostedUrl,
    this.id,
    this.localExchangeRates,
    this.logoUrl,
    this.name,
    this.offchainEligible,
    this.organizationName,
    this.paymentThreshold,
    this.pricing,
    this.pricingType,
    this.pwcbOnly,
    this.redirectUrl,
    this.resource,
    this.supportEmail,
    this.timeline,
    this.utxo,
  });
  CreatePaymentModelData.fromJson(Map<String, dynamic> json) {
    addresses = (json['addresses'] != null) ? CreatePaymentModelDataAddresses.fromJson(json['addresses']) : null;
    brandColor = json['brand_color']?.toString();
    brandLogoUrl = json['brand_logo_url']?.toString();
    cancelUrl = json['cancel_url']?.toString();
    code = json['code']?.toString();
    createdAt = json['created_at']?.toString();
    description = json['description']?.toString();
    exchangeRates = (json['exchange_rates'] != null) ? CreatePaymentModelDataExchangeRates.fromJson(json['exchange_rates']) : null;
    expiresAt = json['expires_at']?.toString();
    feeRate = json['fee_rate']?.toDouble();
    feesSettled = json['fees_settled'];
    hostedUrl = json['hosted_url']?.toString();
    id = json['id']?.toString();
    localExchangeRates = (json['local_exchange_rates'] != null) ? CreatePaymentModelDataLocalExchangeRates.fromJson(json['local_exchange_rates']) : null;
    logoUrl = json['logo_url']?.toString();
    name = json['name']?.toString();
    offchainEligible = json['offchain_eligible'];
    organizationName = json['organization_name']?.toString();
    paymentThreshold = (json['payment_threshold'] != null) ? CreatePaymentModelDataPaymentThreshold.fromJson(json['payment_threshold']) : null;
    pricing = (json['pricing'] != null) ? CreatePaymentModelDataPricing.fromJson(json['pricing']) : null;
    pricingType = json['pricing_type']?.toString();
    pwcbOnly = json['pwcb_only'];
    redirectUrl = json['redirect_url']?.toString();
    resource = json['resource']?.toString();
    supportEmail = json['support_email']?.toString();
  if (json['timeline'] != null) {
  final v = json['timeline'];
  final arr0 = <CreatePaymentModelDataTimeline>[];
  v.forEach((v) {
  arr0.add(CreatePaymentModelDataTimeline.fromJson(v));
  });
    timeline = arr0;
    }
    utxo = json['utxo'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (addresses != null) {
      data['addresses'] = addresses!.toJson();
    }
    data['brand_color'] = brandColor;
    data['brand_logo_url'] = brandLogoUrl;
    data['cancel_url'] = cancelUrl;
    data['code'] = code;
    data['created_at'] = createdAt;
    data['description'] = description;
    if (exchangeRates != null) {
      data['exchange_rates'] = exchangeRates!.toJson();
    }
    data['expires_at'] = expiresAt;
    data['fee_rate'] = feeRate;
    data['fees_settled'] = feesSettled;
    data['hosted_url'] = hostedUrl;
    data['id'] = id;
    if (localExchangeRates != null) {
      data['local_exchange_rates'] = localExchangeRates!.toJson();
    }
    data['logo_url'] = logoUrl;
    data['name'] = name;
    data['offchain_eligible'] = offchainEligible;
    data['organization_name'] = organizationName;
    if (paymentThreshold != null) {
      data['payment_threshold'] = paymentThreshold!.toJson();
    }
    if (pricing != null) {
      data['pricing'] = pricing!.toJson();
    }
    data['pricing_type'] = pricingType;
    data['pwcb_only'] = pwcbOnly;
    data['redirect_url'] = redirectUrl;
    data['resource'] = resource;
    data['support_email'] = supportEmail;
    if (timeline != null) {
      final v = timeline;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['timeline'] = arr0;
    }
    data['utxo'] = utxo;
    return data;
  }
}

class CreatePaymentModel {
/*
{
  "data": {
    "addresses": {
      "ethereum": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
      "usdc": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
      "dai": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
      "apecoin": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
      "shibainu": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
      "tether": "0x3c732ef2fb55599b27d6820e8bfa26079fe18a0f",
      "bitcoincash": "qrrukd43n8ur6rdf5rcu29hflmdmdgds2y3vqmxmqk",
      "dogecoin": "DQwfBJ5XosyTSZ3p1wfKwGYiACovc2BVxw",
      "litecoin": "MSngcEtmhJYJ2s38DvZbE2kATcKm1icrF8",
      "bitcoin": "3EknNtEgvNhmRU833xphfWhxnexsyakmcJ"
    },
    "brand_color": "#122332",
    "brand_logo_url": "",
    "cancel_url": "https://charge/canceled/page",
    "code": "BA859L8P",
    "created_at": "2022-08-11T09:54:29Z",
    "description": "More detailed description, 200 characters or less",
    "exchange_rates": {
      "ETH-USD": "1887.94",
      "BTC-USD": "24497.42",
      "LTC-USD": "61.965",
      "DOGE-USD": "0.071445",
      "BCH-USD": "143.64",
      "USDC-USD": "1.0",
      "DAI-USD": "1.00015",
      "APE-USD": "7.1175",
      "SHIB-USD": "0.000012445",
      "USDT-USD": "1.000445"
    },
    "expires_at": "2022-08-11T10:54:29Z",
    "fee_rate": 0.01,
    "fees_settled": true,
    "hosted_url": "https://commerce.coinbase.com/charges/BA859L8P",
    "id": "c6907635-8eae-497f-8b6f-d8e677842553",
    "local_exchange_rates": {
      "ETH-USD": "1887.94",
      "BTC-USD": "24497.42",
      "LTC-USD": "61.965",
      "DOGE-USD": "0.071445",
      "BCH-USD": "143.64",
      "USDC-USD": "1.0",
      "DAI-USD": "1.00015",
      "APE-USD": "7.1175",
      "SHIB-USD": "0.000012445",
      "USDT-USD": "1.000445"
    },
    "logo_url": "",
    "name": "Charge name, 100 characters or less",
    "offchain_eligible": false,
    "organization_name": "",
    "payment_threshold": {
      "overpayment_absolute_threshold": {
        "amount": "5.00",
        "currency": "USD"
      },
      "overpayment_relative_threshold": "0.005",
      "underpayment_absolute_threshold": {
        "amount": "5.00",
        "currency": "USD"
      },
      "underpayment_relative_threshold": "0.005"
    },
    "pricing": {
      "local": {
        "amount": "5.00",
        "currency": "USD"
      },
      "ethereum": {
        "amount": "0.002648000",
        "currency": "ETH"
      },
      "usdc": {
        "amount": "5.000000",
        "currency": "USDC"
      },
      "dai": {
        "amount": "4.999250112483127531",
        "currency": "DAI"
      },
      "apecoin": {
        "amount": "0.702493853178784686",
        "currency": "APE"
      },
      "shibainu": {
        "amount": "401767.778224185000000000",
        "currency": "SHIB"
      },
      "tether": {
        "amount": "4.997776",
        "currency": "USDT"
      },
      "bitcoincash": {
        "amount": "0.03480925",
        "currency": "BCH"
      },
      "dogecoin": {
        "amount": "69.98390370",
        "currency": "DOGE"
      },
      "litecoin": {
        "amount": "0.08069071",
        "currency": "LTC"
      },
      "bitcoin": {
        "amount": "0.00020410",
        "currency": "BTC"
      }
    },
    "pricing_type": "fixed_price",
    "pwcb_only": false,
    "redirect_url": "https://charge/completed/page",
    "resource": "charge",
    "support_email": "dan.malshan@gmail.com",
    "timeline": [
      {
        "status": "NEW",
        "time": "2022-08-11T09:54:29Z"
      }
    ],
    "utxo": false
  }
} 
*/

  CreatePaymentModelData? data;

  CreatePaymentModel({
    this.data,
  });
  CreatePaymentModel.fromJson(Map<String, dynamic> json) {
    data = (json['data'] != null) ? CreatePaymentModelData.fromJson(json['data']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}
